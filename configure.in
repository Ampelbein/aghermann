AC_COPYRIGHT([Copyright (c) 2008-11 Andrei Zavada <johnhommer@gmail.com>])

AC_INIT([Aghermann], [0.4.4], [johnhommer@gmail.com])
AC_CONFIG_SRCDIR([src/main.cc])
AC_CONFIG_MACRO_DIR([m4])
AC_PREREQ(2.61)

AM_INIT_AUTOMAKE([-Wno-portability])
AC_CONFIG_HEADERS([config.h])

AC_PROG_CXX()

dnl AC_MSG_CHECKING([checking if $CXX is new enough])
dnl gxx_version_new_enough=`$CXX -dumpversion |
dnl      { IFS=. read  VMA VMI VPL &&
dnl        if test $VMA -lt 4 || test $VMI -lt 6 || test $VPL -lt 2; then
dnl           AC_MSG_RESULT(no)
dnl 	  echo no
dnl        else
dnl           AC_MSG_RESULT(yes)
dnl        	  echo yes
dnl        fi }`
dnl test $gxx_version_new_enough = no && \
dnl    AC_MSG_ERROR([g++ version >= 4.6.2 is required to build $PACKAGE as we must use -std=c++0x], 1)
dnl dnl This didn't work for Debian gcc: `g++ -dumpversion` gives "4.6" and no patchlevel

AC_DEFUN([AC_CXX_STDCPP0X_FEATURES],
[AC_CACHE_CHECK(whether $CXX has all required c++0x fetures,
ac_cv_cxx_cpp0x_features,
[AC_LANG_SAVE
 AC_LANG_CPLUSPLUS
 old_CXX=$CXX
 CXX="$CXX -std=c++0x"
 AC_TRY_RUN([
    #include <vector>
    #include <algorithm>
    using namespace std;
    enum class fafa : int { ke, pi };
    int main (int , char **)
    {
      void* p = nullptr;
      vector<vector<int>> v {{1, 2}};
      for ( auto& i : v )
      	;
      unsigned c = count_if( v.begin(), v.end(), [&] (vector<int> &i) { return i == vector<int> ({2,3}); });
      return 0;
    }
 ],
 ac_cv_cxx_cpp0x_features=yes, ac_cv_cxx_cpp0x_features=no,
 ac_cv_cxx_cpp0x_features=yes)
 AC_LANG_RESTORE
 CXX=$old_CXX
])
])
AC_CXX_STDCPP0X_FEATURES()
test $ac_cv_cxx_cpp0x_features = no && \
   AC_MSG_ERROR([g++ version >= 4.6.2 is required to build $PACKAGE as we must use -std=c++0x your g++ doesn't seem to support (first of all, range-based for)], 1)



AC_PROG_LD()
AM_DISABLE_STATIC()
AC_PROG_LIBTOOL()

AC_LANG([C++])



AC_CXX_HAVE_STL
AC_OPENMP()

# lib depends
AX_BOOST_BASE([1.41])
export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/:~/lib/pkgconfig:$PKG_CONFIG_PATH
PKG_CHECK_MODULES([AGHCORE],
	 [samplerate >= 0.1.7
	  gsl
	 ])
PKG_CHECK_MODULES([AGHSIGFILE],
	 [fftw3
	 ])
PKG_CHECK_MODULES([AGHICA],
	 [itpp
	 ])
PKG_CHECK_MODULES([AGHUI],
	 [gtk+-3.0 glib-2.0 gio-unix-2.0
	  gmodule-export-2.0
	  cairo >= 1.8.10
	 ])

AC_CHECK_LIB(
	fftw3_omp, fftw_init_threads,
	[AC_DEFINE([HAVE_LIBFFTW3_OMP], [], [we have fftw3 omp-enabled])
	 AC_SUBST(fftw3_ldadd, ["-lfftw3_omp -lpthread"])
	 LIBFFTW3_LDADD="-lfftw3_omp -lpthread"
	],
	[AC_SUBST(fftw3_ldadd, [""])
	 LIBFFTW3_LDADD=""
	],
	[-lpthread -lfftw3_omp -lfftw3])
AC_SUBST(LIBFFTW3_LDADD, $LIBFFTW3_LDADD)


AC_ARG_WITH( fp-type,
	     AS_HELP_STRING( [--with-fp-type=float|double], [use this as main floating-point type (default = float)]),
	     [main_fp_type=$withval
	      AC_DEFINE( [TFloat], [main_fp_type], [Main floating-point type])],
	     [main_fp_type=float
              AC_DEFINE( [TFloat], [float], [Main floating-point type])])


# Desktop and menu integration
AC_ARG_WITH(xdgdatadir,
	AC_HELP_STRING([--with-xdgdatadir=path],
		[Change where the theme icons and mime registrations are installed]),
	[opt_xdgdatadir=$withval])

if test x$opt_xdgdatadir = x; then
	XDGDATADIR=${datadir}
else
	XDGDATADIR="$opt_xdgdatadir"
fi
AC_SUBST(XDGDATADIR)

AC_ARG_ENABLE(update-desktop-database,
	AC_HELP_STRING([--disable-update-desktop-database],
		[do not update desktop database after installation]),,
	enable_update_desktop_database=no)

AM_CONDITIONAL(DO_UPDATE_DESKTOP_DB, test x$enable_update_desktop_database = xyes)

if test x$enable_update_desktop_database = xyes ; then
	AC_PATH_PROG(UPDATE_DESKTOP_DATABASE, [update-desktop-database], no)
	if test $UPDATE_DESKTOP_DATABASE = no; then
		AC_MSG_ERROR([Cannot find update-desktop-database, make sure it is installed
			      and in your PATH, or configure with --disable-update-desktop-database])
	fi
fi

AC_ARG_ENABLE(update-mime-database,
	AC_HELP_STRING([--disable-update-mime-database],
		[do not update mime database after installation]),,
	enable_update_mime_database=no)

AM_CONDITIONAL(DO_UPDATE_MIME_DB, test x$enable_update_mime_database = xyes)

if test x$enable_update_mime_database = xyes ; then
	AC_PATH_PROG(UPDATE_MIME_DATABASE, [update-mime-database], no)
	if test $UPDATE_MIME_DATABASE = no; then
		AC_MSG_ERROR([Cannot find update-mime-database, make sure it is installed
			      and in your PATH, or configure with --disable-update-mime-database])
	fi
fi


# remaining private defines
AC_SUBST(user, [`whoami`@`hostname`])

AC_DEFINE( [FAFA], [printf( __FILE__ ":%d (%s): fafa\n", __LINE__, __FUNCTION__);], [FAFA])
AC_DEFINE( [FABUF], [printf( __FILE__ ":%d (%s): %s\n", __LINE__, __FUNCTION__, __buf__);], [FABUF])


AC_OUTPUT([
	Makefile
	src/Makefile
	src/libsigfile/Makefile
	src/libica/Makefile
	src/libexstrom/Makefile
	src/core/Makefile
	src/ui/Makefile
	src/tools/Makefile
	data/Makefile
	data/aghermann.desktop
	data/edfhed-gtk.desktop
	doc/Makefile
])

AC_MSG_RESULT([
** Configuration summary for $PACKAGE $VERSION:
   PREFIX:                   ${prefix}
   xdg data directory:       $XDGDATADIR

   CXXFLAGS:                 $CXXFLAGS
   LDFLAGS:                  $LDFLAGS
   main fp type:	     $main_fp_type
])
