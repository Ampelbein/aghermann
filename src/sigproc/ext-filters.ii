/*
 *       File name:  sigproc/ext-filters.ii
 *         Project:  Aghermann
 *          Author:  Andrei Zavada <johnhommer@gmail.com>
 * Initial version:  2012-11-28
 *
 *         Purpose:  some filters used in microcontinuity code (templates)
 *
 *         License:  GPL
 */


extern template valarray<float>  CFilterIIR<float>::apply( const valarray<float>&, bool);
extern template valarray<double> CFilterIIR<double>::apply( const valarray<double>&, bool);


template <typename T>
valarray<T>
sigproc::CFilterIIR<T>::
apply( const valarray<T>& in, bool use_first_sample_to_reset)
{
	if ( unlikely (poles.size() == 0) )
		throw runtime_error ("Unitialized CFilterIIR");

	valarray<T> out (in.size());

	size_t i, l;

	int d;
	switch ( CFilter_base<T>::direction ) {
	case sigproc::forward:
		i = 0;
		l = in.size();
		d = 1;
	    break;
	case sigproc::back:
		i = in.size()-1;
		l = 0-1;
		d = -1;
	    break;
	default:
		throw invalid_argument ("sigproc::CFilterIIR::apply(): direction?");
	}

	for ( ; i != l; i += d ) {
		filter_state_z[0] = in[i];
		if ( unlikely (use_first_sample_to_reset) ) {
			reset( filter_state_z[0]);
			use_first_sample_to_reset = false;
		}
		// Compute new output sample
		double r = 0.;
		// Add past output-values
		size_t j;
		for ( j = 1; j < poles.size(); ++j )
			r += poles[j] * filter_state_p[j];
		// Not anticipate = do not include current input sample in output value
		if ( not anticipate)
			out[i] = r;
		// Add past input-values
		for ( j = 0; j < zeros.size(); ++j )
			r += zeros[j] * filter_state_z[j];
		// Anticipate = include current input sample in output value
		if ( anticipate )
			out[i] = r;
		// Do backpolation (FilterStateP[1] = Last out-sample)
		out[i] = back_polate * filter_state_p[1] + (1.0 - back_polate) * out[i];
		// Scale result
		// TODO: Check if removing extra checks was ok
		// Update filter state
		for ( j = poles.size()-1; j >= 2; --j )
			filter_state_p[j] = filter_state_p[j-1];
		filter_state_p[1] = r;
		for ( j = zeros.size()-1; j >= 1; --j )
			filter_state_z[j] = filter_state_z[j-1];
	}

	return out;
}

// Local Variables:
// Mode: c++
// indent-tabs-mode: 8
// End:
