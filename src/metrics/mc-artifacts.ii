/*
 *       File name:  metrics/mc-artifacts.ii
 *         Project:  Aghermann
 *          Author:  Andrei Zavada <johnhommer@gmail.com>
 *
 * Initial version:  2012-11-28
 *
 *         Purpose:  artifacts, MC-based (templates)
 *
 *         License:  GPL
 */


extern template vector<size_t> detect_artifacts( const valarray<TFloat>&, size_t, const SArtifactDetectionPP&);

template <typename T>
vector<size_t> // don't estimate, use pi*B*x^2 (E) as provided
detect_artifacts( const valarray<T>& signal, size_t sr,
		  const SArtifactDetectionPP& P)
{
	auto	sssu
		= do_sssu_reduction(
			signal,
			sr, P.scope,
			P.mc_gain, P.iir_backpolate,
			P.f0, P.fc, P.bandwidth);
	valarray<T>
		sssu_diff = {sssu.first - sssu.second};

	sigproc::smooth( sssu_diff, P.smooth_side);

	double E;
	if ( P.estimate_E )
		E = P.use_range
			? estimate_E(
				sssu_diff,
				P.sssu_hist_size,
				P.dmin, P.dmax)
			: estimate_E(
				sssu_diff,
				P.sssu_hist_size);
	else
		E = P.E;

	vector<size_t>
		marked;
	for ( size_t p = 0; p < sssu_diff.size(); ++p )
		if ( sssu_diff[p] < E + E * P.lower_thr ||
		     sssu_diff[p] > E + E * P.upper_thr ) {
			marked.push_back(p);
		}

	return marked;
}

// Local Variables:
// Mode: c++
// indent-tabs-mode: 8
// End:
