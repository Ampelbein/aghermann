/*
 *       File name:  libsigproc/sigproc.ii
 *         Project:  Aghermann
 *          Author:  Andrei Zavada <johnhommer@gmail.com>
 * Initial version:  2012-03-11
 *
 *         Purpose:  various signal processing functions (templates)
 *
 *         License:  GPL
 */

extern template void smooth( valarray<TFloat>&, size_t);
extern template void normalize( valarray<TFloat>&);
extern template valarray<TFloat> derivative( const valarray<TFloat>&);
// this one is used for both T = float and double
extern template size_t envelope( const SSignalRef<float>&, double, double, valarray<float>*, valarray<float>*, vector<unsigned long>*, vector<unsigned long>*);
extern template size_t envelope( const SSignalRef<double>&, double, double, valarray<double>*, valarray<double>*, vector<unsigned long>*, vector<unsigned long>*);
extern template valarray<TFloat> dzcdf( const SSignalRef<TFloat>&, double, double, size_t);
extern template double sig_diff( const valarray<TFloat>&, const valarray<TFloat>&, int);
extern template double phase_diff( const SSignalRef<TFloat>&, const SSignalRef<TFloat>&, size_t, size_t, double, double, unsigned, size_t);



template <typename T>
void
smooth( valarray<T>& a, size_t side)
{
	if ( side == 0 )
		return;

	size_t	both = side * 2 + 1;

	valarray<T> tmp (a.size() + 2*side);
	tmp[ slice (0              , side, 1)     ] = a[0];
	tmp[ slice (side           , a.size(), 1) ] = a;
	tmp[ slice (side + a.size(), side, 1)     ] = a[a.size()-1];

	valarray<T> dst (a.size());
	for ( size_t i = 0; i < a.size(); ++i )
		dst[i] = valarray<T>{tmp[ slice (i, both, 1) ]}.sum() / both;

	a = dst;
}



template <typename T>
void
normalize( valarray<T>& a)
{
	a /= a.max();
}


template <typename T>
valarray<T>
derivative( const valarray<T>& a)
{
	valarray<T> out (a.size());
	for ( size_t i = 1; i < a.size(); ++i )
		out[i-1] = a[i] - a[i-1];
	return move( out);
}






template <typename T, class Container>
valarray<T>
interpolate( const vector<unsigned long>& xi,
	     unsigned samplerate, const Container& y, double dt)
{
	size_t i;
	valarray<double>
		x_known (xi.size()),
		y_known (xi.size());
	for ( i = 0; i < xi.size(); ++i ) {
		x_known[i] = (double)xi[i] / samplerate;
		y_known[i] = y[ xi[i] ];
	}

	gsl_spline *spline = gsl_spline_alloc( gsl_interp_akima, xi.size());
	gsl_interp_accel *acc = gsl_interp_accel_alloc();

	gsl_spline_init( spline, &x_known[0], &y_known[0], xi.size());

	double	t;
	size_t	pad = (1./samplerate / dt) // this I understand
			/ 2;                // this, I don't
	valarray<T>
		out (ceilf((x_known[x_known.size()-1] - x_known[0] + 1./samplerate) / dt) + 1);
	for ( i = pad, t = x_known[0]; t < x_known[x_known.size()-1]; ++i, t += dt )
		out[i] = gsl_spline_eval( spline, t, acc);

	gsl_interp_accel_free( acc);
	gsl_spline_free( spline);

	return move( out);
}






template <typename T>
size_t
envelope( const SSignalRef<T>& in,
	  double dh_,  // tightness, sec
	  double dt_,
	  valarray<T>* env_lp = nullptr,    // return interpolated
	  valarray<T>* env_up = nullptr,
	  vector<unsigned long> *mini_p = nullptr, // return vector of extremum indices
	  vector<unsigned long> *maxi_p = nullptr)
{
	auto&	S = in.signal;
	ssize_t	n_samples = S.size(),
		dh2 = dh_ * in.samplerate / 2;

	vector<unsigned long>
		mini,
		maxi;

	// always put a point at start
	mini.push_back( 0);
	maxi.push_back( 0);

	// auto dS = derivative(in.signal); // will skip over many extrema due to quantization
	ssize_t	i;
	for ( i = dh2; i < n_samples-dh2; ++i ) {
		auto lmax = S[ slice (i-dh2, dh2+dh2, 1) ].max();
		if ( S[i] == lmax && i != i-dh2 && i+dh2 ) {
			maxi.push_back(i);
			i += dh2 - 1;
			continue;
		}
	}
	for ( i = dh2; i < n_samples-dh2; ++i ) {
		auto lmin = S[ slice (i-dh2, dh2+dh2, 1) ].min();
		if ( S[i] == lmin && i != i-dh2 && i+dh2 ) {
			mini.push_back(i);
			i += dh2 - 1;
		}
	}

	// put a point at end
	mini.push_back( i);
	maxi.push_back( i);

	if ( mini.size() > 5 && maxi.size() > 5 ) {
		if ( env_lp )
			*env_lp = interpolate<T>( mini, in.samplerate, in.signal, dt_);
		if ( env_up )
			*env_up = interpolate<T>( maxi, in.samplerate, in.signal, dt_);
		if ( mini_p )
			*mini_p = mini;
		if ( maxi_p )
			*maxi_p = maxi;

		return maxi.size();
	} else
		return 0;
}






template <typename T>
valarray<T>
dzcdf( const SSignalRef<T>& in,
//       size_t sa, size_t sz,
       double dt,
       double sigma,
       size_t smooth_side)
{
      // // prepare with context
      // 	ssize_t	csa = (ssize_t)sa - sigma * in.samplerate/2,
      // 		csz = (ssize_t)sz + sigma * in.samplerate/2;
      // 	agh::alg::ensure_within( csa, 0, in.signal.size());
      // 	agh::alg::ensure_within( csz, 0, in.signal.size());
      // 	size_t	dsa = sa - csa,
      // 		dsz = csz - sz;

	valarray<T>
		// tmp (in.signal [slice (csa, csz-csa, 1)]);
		tmp (in.signal);
	smooth( tmp, smooth_side);
	valarray<T>
		deriv = derivative( tmp);

      // collect zerocrossings
	vector<size_t> izx;
	for ( size_t i = 1; i < in.signal.size(); ++i )
		if ( agh::alg::sign( deriv[i-1]) != agh::alg::sign( deriv[i]) )
			izx.push_back( i);

      // prepare structures for interpolation
	size_t out_size = (double)in.signal.size()/in.samplerate / dt;
	vector<unsigned long> xi (out_size);
	valarray<T> y (in.signal.size());

      // calculate the bloody zcdf
	double	window = 4*dt; // half a second, good enough
	double	t, tdiff;
	size_t	I = 0, J;
	for ( size_t i = 0; i < out_size; ++i ) {
		t = i*dt;
		xi[i] = t * in.samplerate;
		for ( J = I; J > 0; --J ) {
			tdiff = (double)izx[J]/in.samplerate - t;
			if ( tdiff >  window )
				continue;
			if ( tdiff < -window )
				break;
			y[ xi[i] ] += exp( -gsl_pow_2(tdiff) / gsl_pow_2(sigma));
		}
		for ( ; J < izx.size(); ++J ) {
			tdiff = (double)izx[J]/in.samplerate - t;
			if ( tdiff < -window )
				continue;
			if ( tdiff >  window )
				break;
			y[ xi[i] ] += exp( -gsl_pow_2(tdiff) / gsl_pow_2(sigma));
		}
		I = J;
	}
	return move( interpolate<T>( xi, in.samplerate, y, 1./in.samplerate));
}





template <typename T>
double
sig_diff( const valarray<T>& a, const valarray<T>& b,
	  int d)
{
	double diff = 0.;
	if ( d > 0 )
		for ( size_t i =  d; i < a.size(); ++i )
			diff += fdim( a[i - d], b[i]);
	else
		for ( size_t i = -d; i < a.size(); ++i )
			diff += fdim( a[i], b[i + d]);
	return diff;
}

template <typename T>
double
phase_diff( const SSignalRef<T>& sig1,
	    const SSignalRef<T>& sig2,
	    size_t sa, size_t sz,
	    double fa, double fz,
	    unsigned order,
	    size_t scope)
{
	if ( sig1.samplerate != sig2.samplerate )
		throw invalid_argument ("sigproc::phase_diff(): sig1.samplerate != sig2.samplerate");
	if ( order == 0 )
		throw invalid_argument ("sigproc::phase_diff(): order == 0");

      // bandpass sig1 and sig2
	valarray<T>
		sig1p = exstrom::band_pass( valarray<T> (&sig1.signal[sa], sz - sa), sig1.samplerate, fa, fz, order, true),
		sig2p = exstrom::band_pass( valarray<T> (&sig2.signal[sa], sz - sa), sig2.samplerate, fa, fz, order, true);

      // slide one against the other a little
	double	diff = INFINITY, old_diff, diff_min = INFINITY;
	int	dist, dist_min = 0;
	// go east
	dist = 0;
	do {
		old_diff = diff;
		if ( (diff = sig_diff( sig1p, sig2p, dist)) < diff_min )
			diff_min = diff, dist_min = dist;
	} while ( -(dist--) < (int)scope && old_diff > diff );  // proceed until the first minimum
	// and west
	dist = 0, old_diff = INFINITY;
	do {
		old_diff = diff;
		if ( (diff = sig_diff( sig1p, sig2p, dist)) < diff_min )
			diff_min = diff, dist_min = dist;
	} while (  (dist++) < (int)scope && old_diff > diff );

	return (double)dist_min / sig1.samplerate;
}


// Local Variables:
// Mode: c++
// indent-tabs-mode: 8
// tab-width: 8
// c-basic-offset: 8
// End:
